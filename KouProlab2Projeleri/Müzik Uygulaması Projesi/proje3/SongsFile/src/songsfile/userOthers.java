/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package songsfile;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import static songsfile.userMainPage.isim;
import static songsfile.userPlaylist.isim;

/**
 *
 * @author UMUT
 */
public class userOthers extends javax.swing.JFrame implements TableModelListener {

    static private String kullanıcıadi;
    static userPanel isim2 = new userPanel();

    public  String getKullanıcıadi() {
        return kullanıcıadi;
    }
     
    /**
     * Creates new form userOthers
     */
    public userOthers() {
       
        initComponents();
      
    }

    private ArrayList<UyelikArama> uyelikTipi() {
        ArrayList<UyelikArama> UyeList = new ArrayList<>();
        Statement st = null;
        ResultSet rs = null;
        try {
            st = connection.connect().createStatement();
            String searchQuery = "SELECT * FROM 'users'";
            rs = st.executeQuery(searchQuery);
            UyelikArama arama;
            while (rs.next()) {

                arama = new UyelikArama(
                        rs.getInt("usersid"),
                        rs.getInt("usersSubscription"),
                        rs.getString("usersNickName")
                );
                UyeList.add(arama);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            try {
                rs.close();
                st.close();
            } catch (Exception e) {

            }
        }

        return UyeList;
    }

    private void showUyeList() {
        ArrayList<UyelikArama> sonuc = uyelikTipi();
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        Object[] row = new Object[2];

        for (int i = 0; i < sonuc.size(); i++) {
            if (sonuc.get(i).getUyelikTipi() == 1) {
                if (sonuc.get(i).getUyelikAdi() == null ? isim2.getKullanıcıAdi() != null : !sonuc.get(i).getUyelikAdi().equals(isim2.getKullanıcıAdi())) {
                    row[0] = sonuc.get(i).getUyelikId();
                    row[1] = sonuc.get(i).getUyelikAdi();
                    model.addRow(row);

                }

            }

        }
    }

    private ArrayList<TakipArama> uyelikTakip() {
        ArrayList<TakipArama> TakipList = new ArrayList<>();
        Statement st = null;
        ResultSet rs = null;
        try {
            st = connection.connect().createStatement();
            String searchQuery = "SELECT * FROM 'takiplistesi'";
            rs = st.executeQuery(searchQuery);
            TakipArama arama;
            while (rs.next()) {

                arama = new TakipArama(
                        rs.getInt("kullanıcıtakipid"),
                        rs.getString("kullanıcıadi"),
                        rs.getString("kullanıcıtakip")
                );
                TakipList.add(arama);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            try {
                rs.close();
                st.close();
            } catch (Exception e) {

            }
        }

        return TakipList;
    }

    private void showtakipList() {
        ArrayList<TakipArama> sonuc = uyelikTakip();
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        Object[] row = new Object[2];

        for (int i = 0; i < sonuc.size(); i++) {
            if(sonuc.get(i).getKullanıcıadi() == null ? isim2.getKullanıcıAdi() == null : sonuc.get(i).getKullanıcıadi().equals(isim2.getKullanıcıAdi())){
            row[0] = sonuc.get(i).getKullanıcıid();
            row[1] = sonuc.get(i).getKullanıcıtakip();
            model.addRow(row);
            }
            

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        kullanıcısec = new javax.swing.JButton();
        Takipet = new javax.swing.JButton();
        Takiptencıkar = new javax.swing.JButton();
        Hepsi = new javax.swing.JRadioButton();
        Takip = new javax.swing.JRadioButton();
        görüntüle = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        usermain = new javax.swing.JMenu();
        playlist = new javax.swing.JMenu();
        others = new javax.swing.JMenu();
        top10 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(800, 525));
        setMinimumSize(new java.awt.Dimension(800, 525));
        setPreferredSize(new java.awt.Dimension(800, 525));
        setSize(new java.awt.Dimension(800, 525));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Kullanıcı ID","Kullanıcı İsmi"
            }
        ));
        jScrollPane1.setViewportView(table);

        kullanıcısec.setText("Çalma Listesini Göster");
        kullanıcısec.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                kullanıcısecMouseClicked(evt);
            }
        });
        kullanıcısec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kullanıcısecActionPerformed(evt);
            }
        });

        Takipet.setText("Takip et");
        Takipet.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TakipetMouseClicked(evt);
            }
        });

        Takiptencıkar.setText("Takipten çıkar");
        Takiptencıkar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TakiptencıkarMouseClicked(evt);
            }
        });

        buttonGroup1.add(Hepsi);
        Hepsi.setText("Bütün kullanıcılar");

        buttonGroup1.add(Takip);
        Takip.setText("Takip ettiklerin");

        görüntüle.setText("Görüntüle");
        görüntüle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                görüntüleMouseClicked(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setText("<---");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        usermain.setText("Tüm Şarkılar");
        usermain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                usermainMouseClicked(evt);
            }
        });
        jMenuBar1.add(usermain);

        playlist.setText("Çalma Listelerim");
        playlist.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playlistMouseClicked(evt);
            }
        });
        jMenuBar1.add(playlist);

        others.setText("Diğer Kullanıcılar");
        others.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                othersMouseClicked(evt);
            }
        });
        jMenuBar1.add(others);

        top10.setText("Top 10");
        top10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                top10MouseClicked(evt);
            }
        });
        jMenuBar1.add(top10);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 611, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(kullanıcısec)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(Takipet, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(görüntüle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Hepsi)
                        .addComponent(Takip)
                        .addComponent(Takiptencıkar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(63, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(Hepsi)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Takip)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(görüntüle, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Takipet, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Takiptencıkar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(kullanıcısec, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(89, 89, 89)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void kullanıcısecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kullanıcısecActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_kullanıcısecActionPerformed

    private void usermainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usermainMouseClicked
        new userMainPage().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_usermainMouseClicked

    private void playlistMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playlistMouseClicked
        new userPlaylist().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_playlistMouseClicked

    private void othersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_othersMouseClicked
        new userOthers().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_othersMouseClicked

    private void top10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_top10MouseClicked
        new userTop10().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_top10MouseClicked

    private void kullanıcısecMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_kullanıcısecMouseClicked
        PreparedStatement ps = null;
        try {

            int i = table.getSelectedRow();
            TableModel model = table.getModel();

            kullanıcıadi = table.getValueAt(i, 1).toString();
            new userOthersSec().setVisible(true);
            this.setVisible(false);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            try {
                ps.close();

            } catch (Exception e) {

            }
        }
    }//GEN-LAST:event_kullanıcısecMouseClicked

    private void görüntüleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_görüntüleMouseClicked
        if (Hepsi.isSelected()) {
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            model.setRowCount(0);
            showUyeList();
            Takipet.setVisible(true);
            Takiptencıkar.setVisible(false);
        }
        if (Takip.isSelected()) {
             DefaultTableModel model = (DefaultTableModel) table.getModel();
            model.setRowCount(0);
            showtakipList();
            Takipet.setVisible(false);
            Takiptencıkar.setVisible(true);
        }
    }//GEN-LAST:event_görüntüleMouseClicked

    private void TakipetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TakipetMouseClicked
         PreparedStatement ps = null;
        try {
            String Query = "INSERT INTO 'takiplistesi'('kullanıcıadi','kullanıcıtakip')VALUES(?,?)";
            ps = connection.connect().prepareStatement(Query);
            int i = table.getSelectedRow();
            TableModel model = table.getModel();
            ps.setString(1,isim2.getKullanıcıAdi());
            ps.setString(2, model.getValueAt(i, 1).toString());
         
            ps.executeUpdate();
            JOptionPane.showMessageDialog(null, "TAKİP LİSTESİNE EKLENDİ");

           
            
           

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            try {
                ps.close();
                
            } catch (Exception e) {

            }
        }
    }//GEN-LAST:event_TakipetMouseClicked

    private void TakiptencıkarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TakiptencıkarMouseClicked
        ArrayList<TakipArama> sonuc = uyelikTakip();
        PreparedStatement ps = null;
           try {
            
            
           for(int i=0;i<sonuc.size();i++)
           {   
               if(sonuc.get(i).getKullanıcıadi()== null ? isim2.getKullanıcıAdi() == null : sonuc.get(i).getKullanıcıadi().equals(isim2.getKullanıcıAdi())){ 
            //    System.out.println(value);
            int row = table.getSelectedRow();
            String value = (table.getModel().getValueAt(row, 0).toString());
            String Query = "DELETE  FROM takiplistesi WHERE kullanıcıtakipid=" +value;
            ps = connection.connect().prepareStatement(Query);  
            ps.executeUpdate();
            if (ps.executeUpdate() > 1) {
                JOptionPane.showMessageDialog(null, "TAKİPTEN CIKARILDI");
            }    
            }
            }


            DefaultTableModel model = (DefaultTableModel) table.getModel();
            model.setRowCount(0);
            if (Hepsi.isSelected()) {
                showUyeList();
            } else if (Takip.isSelected()) {
                showtakipList();
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            try {
                ps.close();
            } catch (Exception e) {

            }
        }
     
    }//GEN-LAST:event_TakiptencıkarMouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
       new userPanel().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton1MouseClicked
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(userOthers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(userOthers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(userOthers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(userOthers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new userOthers().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton Hepsi;
    private javax.swing.JRadioButton Takip;
    private javax.swing.JButton Takipet;
    private javax.swing.JButton Takiptencıkar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton görüntüle;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton kullanıcısec;
    private javax.swing.JMenu others;
    private javax.swing.JMenu playlist;
    private javax.swing.JTable table;
    private javax.swing.JMenu top10;
    private javax.swing.JMenu usermain;
    // End of variables declaration//GEN-END:variables

    @Override
    public void tableChanged(TableModelEvent tme) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
