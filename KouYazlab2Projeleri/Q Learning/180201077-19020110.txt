using System;
using System.IO;
using System.Windows.Forms;

namespace QLearning
{

    static class Program
    {
        static int mRowSize=30;
        static int mCountsize=30;
        
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]

        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new arayüz());
            /*           Console.WriteLine("Begin Q-learning maze demo");
            Console.WriteLine("Setting up maze and rewards");
            int ns = 12;
            int[][] FT = CreateMaze(ns);
            double[][] R = CreateReward(ns);
            double[][] Q = CreateQuality(ns);
            Console.WriteLine("Analyzing maze using Q-learning");
            int goal = 11;
            double gamma = 0.5;
            double learnRate = 0.5;
            int maxEpochs = 1000;
            Train(FT, R, Q, goal, gamma, learnRate, maxEpochs);
            Console.WriteLine("Done. Q matrix: ");
            Print(Q);
            Console.WriteLine("Using Q to walk from cell 8 to 11");
            Walk(8, 11, Q);
            Console.WriteLine("End demo");
            Console.ReadLine();*/
        }
        
        /*class Program
    {
        static Random rnd = new Random(1);
        static void Print(double[][] Q)
        {
            int ns = Q.Length;
            Console.WriteLine("[0] [1] . . [11]");
            for (int i = 0; i < ns; ++i)
            {
                for (int j = 0; j < ns; ++j)
                {
                    Console.Write(Q[i][j].ToString("F2") + " ");
                }
                Console.WriteLine();
            }
        }
        static int[][] CreateMaze(int ns)
        {
            int[][] FT = new int[ns][];
            for (int i = 0; i < ns; ++i) FT[i] = new int[ns];
            FT[0][1] = FT[0][4] = FT[1][0] = FT[1][5] = FT[2][3] = 1;
            FT[2][6] = FT[3][2] = FT[3][7] = FT[4][0] = FT[4][8] = 1;
            FT[5][1] = FT[5][6] = FT[5][9] = FT[6][2] = FT[6][5] = 1;
            FT[6][7] = FT[7][3] = FT[7][6] = FT[7][11] = FT[8][4] = 1;
            FT[8][9] = FT[9][5] = FT[9][8] = FT[9][10] = FT[10][9] = 1;
            FT[11][11] = 1;  // Goal
            return FT;
        }
        static double[][] CreateReward(int ns)
        {
            double[][] R = new double[ns][];
            for (int i = 0; i < ns; ++i) R[i] = new double[ns];
            R[0][1] = R[0][4] = R[1][0] = R[1][5] = R[2][3] = -0.1;
            R[2][6] = R[3][2] = R[3][7] = R[4][0] = R[4][8] = -0.1;
            R[5][1] = R[5][6] = R[5][9] = R[6][2] = R[6][5] = -0.1;
            R[6][7] = R[7][3] = R[7][6] = R[7][11] = R[8][4] = -0.1;
            R[8][9] = R[9][5] = R[9][8] = R[9][10] = R[10][9] = -0.1;
            R[7][11] = 10.0;  // Goal
            return R;
        }
        static double[][] CreateQuality(int ns)
        {
            double[][] Q = new double[ns][];
            for (int i = 0; i < ns; ++i)
                Q[i] = new double[ns];
            return Q;
        }
        static List<int> GetPossNextStates(int s, int[][] FT)
        {
            List<int> result = new List<int>();
            for (int j = 0; j < FT.Length; ++j)
                if (FT[s][j] == 1) result.Add(j);
            return result;
        }
        static int GetRandNextState(int s, int[][] FT)
        {
            List<int> possNextStates = GetPossNextStates(s, FT);
            int ct = possNextStates.Count;
            int idx = rnd.Next(0, ct);
            return possNextStates[idx];
        }
        static void Train(int[][] FT, double[][] R, double[][] Q, int goal, double gamma, double lrnRate, int maxEpochs)
        {
            for (int epoch = 0; epoch < maxEpochs; ++epoch)
            {
                int currState = rnd.Next(0, R.Length);
                while (true)
                {
                    int nextState = GetRandNextState(currState, FT);
                    List<int> possNextNextStates = GetPossNextStates(nextState, FT);
                    double maxQ = double.MinValue;
                    for (int j = 0; j < possNextNextStates.Count; ++j)
                    {
                        int nns = possNextNextStates[j];  // short alias
                        double q = Q[nextState][nns];
                        if (q > maxQ) maxQ = q;
                    }
                    Q[currState][nextState] =
  ((1 - lrnRate) * Q[currState][nextState]) +
  (lrnRate * (R[currState][nextState] + (gamma * maxQ)));
                    currState = nextState;
                    if (currState == goal) break;
                }
            }
        }
        static void Walk(int start, int goal, double[][] Q)
        {
            int curr = start; int next;
            Console.Write(curr + "->");
            while (curr != goal)
            {
                next = ArgMax(Q[curr]);
                Console.Write(next + "->");
                curr = next;
            }
            Console.WriteLine("done");
        }
        static int ArgMax(double[] vector)
        {
            double maxVal = vector[0]; int idx = 0;
            for (int i = 0; i < vector.Length; ++i)
            {
                if (vector[i] > maxVal)
                {
                    maxVal = vector[i]; idx = i;
                }
            }
            return idx;
        }*/
        }

    }
-----------------------------------------------------------------------------------------------
using System;

using System.Drawing;
using System.IO;
using System.Text;
using System.Windows.Forms;

namespace QLearning
{

    public partial class arayüz : Form
    {
        public string[,] matrix = new string[30, 30];
        string redState = "red";
        string blueState = "blue";
        string greenState = "green";
        string selecteditem = "";
        int startPointCount = 0;
        int endPointCount = 0;
        string path = @"C:\Users\Arthas\source\repos\QLearning\QLearning\engel.txt";
        public arayüz()
        {
            InitializeComponent();
            desk.RowCount = 30;
            desk.ColumnCount = 30;
            desk.ColumnHeadersVisible = false;
            desk.RowHeadersVisible = false;
            desk.AllowUserToResizeColumns = false;
            desk.AllowUserToResizeRows = false;
            desk.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
            desk.AutoSizeRowsMode = DataGridViewAutoSizeRowsMode.DisplayedCells;
            ErrorText.Visible = false;
            ExplanationBox.Text = "YAZILIM LAB. II PROJE III.\n" +
                "Q-learning ile Yol Planlaması Projesi \n" +
                "Kendinize özgü engellerinizi oluşturunuz.\n" +
                "Duvar veya Engel eklemek için Red Button'ı Kullanınız.\n" +
                "Başlangıç Noktası için Green Button ve Bitiş Noktası için Blue Button'ı kullanınız.\n" +
                "Sadece 1 Başlangıç ve Bitiş Noktanınız olabilir.Duvar veya Engel olmak zorunda değildir.\n" +
                "Şekillendirmeniz bittikten sonra Register Buttonunu kullanınız.\n" +
                "Yasin Ömer Kara-180201077/Feyza Demirel-19020110";

        }

        private void arayüz_Load(object sender, EventArgs e)
        {

        }
        private void Wall_Click(object sender, EventArgs e)
        {
            selecteditem = redState;
        }

        private void EndPoint_Click(object sender, EventArgs e)
        {
            selecteditem = blueState;
        }

        private void StartPoint_Click(object sender, EventArgs e)
        {

            selecteditem = greenState;
        }

        private void desk_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (selecteditem == "red")
            {
                desk.CurrentCell.Style.BackColor = Color.Red;
                desk.CurrentCell.Value = "K";
            }
            else if (selecteditem == "blue")
            {
                endPointCount++;
                desk.CurrentCell.Style.BackColor = Color.Blue;
                desk.CurrentCell.Value = "B";
            }
            else if (selecteditem == "green" && startPointCount < 1)
            {
                startPointCount++;
                desk.CurrentCell.Style.BackColor = Color.Green;
                desk.CurrentCell.Value = "G";
            }
        }

        public void Register_Click(object sender, EventArgs e)
        {
            string value;

            if (startPointCount == 0 || endPointCount == 0)
            {
                ErrorText.Visible = true;
                ErrorText.Text = "Minimun need 1 StartPoint and EndPoint";
            }
            else
            {
                ErrorText.Text = "";
                ErrorText.Visible = false;

                File.WriteAllText(path, "");
                FileStream fs = new FileStream(path, FileMode.OpenOrCreate, FileAccess.ReadWrite);
                using (fs)
                {
                    for (int i = 0; i < desk.RowCount; i++)
                    {
                        for (int j = 0; j < desk.ColumnCount; j++)
                        {
                            value = String.IsNullOrEmpty(desk.Rows[i].Cells[j].Value?.ToString()) ? "null" : desk.Rows[i].Cells[j].Value.ToString();
                            AddText(fs, "(" + desk.Rows[i].Index.ToString() + "," +
                                desk.Columns[j].Index.ToString() + "," + value + ") \n");
                            matrix[desk.Rows[i].Index, desk.Columns[j].Index] = value;
                            Console.WriteLine(desk.Rows[i].Index + " " + desk.Columns[j].Index + " " + matrix[desk.Rows[i].Index, desk.Columns[j].Index]);
                        }
                    }
                }
                desk.Visible = false;
                pictureBox1.Visible = true;
                ExplanationBox.Visible = false;

            }

        }

        private static void AddText(FileStream fs, string value)
        {
            byte[] info = new UTF8Encoding(true).GetBytes(value);
            fs.Write(info, 0, info.Length);
        }

        private void pictureBox1_Paint(object sender, PaintEventArgs e)
        {
            Graphics myGraphics = e.Graphics;

            for (int i = 0; i < 30; i++)
                for (int j = 0; j < 30; j++)
                {
                    
                    // print grids
                    myGraphics.DrawRectangle(new Pen(Color.Black), j * 20, i * 20, 20, 20);

                    if(matrix[i,j]=="K")
                        myGraphics.FillRectangle(new SolidBrush(Color.Red), j * 20 + 1, i * 20 + 1, 20 - 1, 20 - 1);
                    if (matrix[i, j] == "B")
                        myGraphics.FillRectangle(new SolidBrush(Color.Blue), j * 20 + 1, i * 20 + 1, 20 - 1, 20 - 1);
                    if (matrix[i, j] == "G")
                        myGraphics.FillEllipse(new SolidBrush(Color.Green), j * 20 + 1, i * 20 + 1, 20 - 1, 20 - 1);

                }
        }
    }
}

